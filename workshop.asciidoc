Java 8 
======= 
:email: <dubois.vct@free.fr>
:deckjs_theme: web-2.0
:deckjs_transition: horizontal-slide
:pygments:
:pygments_style: native


== Pourquoi Java 8 ?

[incremental="true"]
* Des nouveautés conséquentes
** Programmation fonctionnelle
** Méthodes par défaut dans les interfaces
** Gestion des architectures multi-coeurs
** Nouvelles API (streams, optional, dates, ...)
* Fin avril 2015, arrêt du support de Java 7
* Cette version est sortie depuis mars 2014

== Qu'est ce que la programmation fonctionnelle ?

[incremental="true"]
* Nouveau paradigme de programmation
* Pas si nouveau en fait !
* Déjà présent dans commons-collections, Guava, ...
* C'est comme ça que JavaScript fonctionne

== Différence entre l'approche objet "classique" et l'approche fonctionnelle

[incremental="true"]
* Dans l'approche objet
* Les valeurs sont des "citoyens de première classe"
* Tandis que les méthodes ou les classes sont des "citoyens de deuxième classe"
* Pour faire court, on ne peut pas les passer en paramètre d'une méthode par exemple

== Différence entre l'approche objet "classique" et l'approche fonctionnelle

[incremental="true"]
* Dans l'approche fonctionnelle
* Les méthodes et classes sont des "citoyens de première classe"
* Dans Java 8
* Ajout des lambdas et des références de méthodes
* On peut passer des méthodes en paramètre d'autres méthodes
* On peut donc passer du comportement à une méthode
* Cela apporte un regard nouveau sur nos algorithmes !
* Fini le copier-coller !

== Exemple avant Java 8

[source,java,numbered]
------------------------------------------
public static void main(String[] args) {
    List<String> values = Arrays.asList("one", "two", "three");
    logOne(values);
}
public static void logOne(List<String> values) {
    for (String value : values) {
        if ("one".equals(value)) {
            System.out.println("trouvé");
        }
    }
}
------------------------------------------

== Exemple après Java 8

[source,java,numbered]
------------------------------------------
public static void main(String[] args) {
    List<String> values = Arrays.asList("one", "two", "three");
    log(values, (String value) -> "one".equals(value));
}
public static void log(List<String> values, Predicate<String> predicate) {
    for (String value : values) {
        if (predicate.test(value)) {
            System.out.println("trouvé");
        }
    }
}
------------------------------------------
